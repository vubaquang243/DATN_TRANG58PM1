package com.seatech.tp.kqphathanh.dao;

import com.seatech.framework.datamanager.AppDAO;
import com.seatech.framework.datamanager.DateParameter;
import com.seatech.framework.datamanager.Parameter;
import com.seatech.framework.exception.DAOException;
import com.seatech.framework.exception.TPCPException;
import com.seatech.framework.utils.StringUtil;
import com.seatech.tp.banletraiphieutw.dao.BanLeTraiPhieuTwDAO;
import com.seatech.tp.banletraiphieutw.vo.BanLeTraiPhieuTwChiTietVO;
import com.seatech.tp.banletraiphieutw.vo.BanLeTraiPhieuTwVO;

import com.seatech.tp.kqphathanh.vo.QLyKQPhatHanhCTiet_SoHuuVO;
import com.seatech.tp.kqphathanh.vo.QLyKQPhatHanhCTiet_TpcpVO;
import com.seatech.tp.kqphathanh.vo.QLyKQPhatHanhVO;

import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;

import java.sql.PreparedStatement;

import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

public class QLyKQPhatHanhDAO extends AppDAO {
    private Connection conn = null;
    private String CLASS_NAME_DAO = "com.seatech.tp.kqphathanh.dao.QLyKQPhatHanhDAO";
    private String CLASS_NAME_VO = "com.seatech.tp.kqphathanh.vo.QLyKQPhatHanhVO";
    private String CLASS_NAME_VO_CTIET_TPCP = "com.seatech.tp.kqphathanh.vo.QLyKQPhatHanhCTiet_TpcpVO";
    private String CLASS_NAME_VO_CTIET_SoHuu = "com.seatech.tp.kqphathanh.vo.QLyKQPhatHanhCTiet_SoHuuVO";
    private static String STRING_EMPTY = "";

    public QLyKQPhatHanhDAO(Connection conn) {
        super();
        this.conn = conn;
    }

    public void InsertKQPH_TPCP() {

    }

    public Long update(QLyKQPhatHanhVO vo) throws Exception {
        Vector v_param = new Vector();
        Vector v_param2 = null;
        Vector v_param3 = null;
        //Lay ID tu seq
        Long lID = new Long("0");
        int trangthai = 0;
        //0: sua
        //1: them
        try {
            StringBuffer strSQL = new StringBuffer();
            String sql = "";
            if (vo.getGuid() != null && !vo.getGuid().equals("")) {
                sql = generateSQLUpdate(vo, v_param, "TP_KQPH", conn);
                strSQL.append(sql);
                strSQL.append("WHERE GUID = ?");
                v_param.add(new Parameter(vo.getGuid(), true));
                lID = new Long(vo.getGuid());
                trangthai = 0;
            } else {
                lID = getSeqNextValue("TP_MA_KQPH_SEQ", conn);
                vo.setGuid(String.valueOf(lID));
                sql = generateSQLInsert(vo, v_param, "TP_KQPH", conn);
                strSQL.append(sql);
                trangthai = 1;
            }
            if (executeStatement(strSQL.toString(), v_param, conn) == 1) {
                //insert list ctiet_tpcp
                if (trangthai == 1) {
                    if (vo.getLstKQDT_CTiet_TPCP() != null && !vo.getLstKQDT_CTiet_TPCP().isEmpty()) {
                        //delete first
                        executeStatement("DELETE FROM TP_KQPH_CTIET_TPCP WHERE TP_KQ_PH_ID = '" + lID + "'", v_param2, conn);
                        QLyKQPhatHanhCTiet_TpcpVO ctiet_TPCPVO = null;
                        Iterator ito = vo.getLstKQDT_CTiet_TPCP().iterator();
                        while (ito.hasNext()) {
                            v_param2 = new Vector();
                            ctiet_TPCPVO = (QLyKQPhatHanhCTiet_TpcpVO)ito.next();
                            ctiet_TPCPVO.setTp_kq_ph_id(String.valueOf(lID));
                            ctiet_TPCPVO.setKy_han(vo.getKy_han());
                            ctiet_TPCPVO.setGuid(String.valueOf(getSeqNextValue("TP_MA_KQPHCTIET_TPCP_SEQ", conn)));
                            sql = generateSQLInsert(ctiet_TPCPVO, v_param2, "TP_KQPH_CTIET_TPCP", conn);
                            executeStatement(sql, v_param2, conn);
                        }
                    }
                }
                //insert list ctiet_sohuu
                if (vo.getLstKQPH_CTiet_SoHuu() != null && !vo.getLstKQPH_CTiet_SoHuu().isEmpty()) {
                    //delete first
                    executeStatement("DELETE FROM TP_KQPH_CTIET_SO_HUU WHERE TP_KQ_PH_ID = '" + lID + "'", v_param3, conn);
                    QLyKQPhatHanhCTiet_SoHuuVO ctiet_SoHuuVO = null;
                    Iterator ito = vo.getLstKQPH_CTiet_SoHuu().iterator();
                    while (ito.hasNext()) {
                        v_param3 = new Vector();
                        ctiet_SoHuuVO = (QLyKQPhatHanhCTiet_SoHuuVO)ito.next();
                        ctiet_SoHuuVO.setTp_kq_ph_id(String.valueOf(lID));
                        ctiet_SoHuuVO.setGuid(String.valueOf(getSeqNextValue("TP_MA_KQPHCTIET_SOHUU_SEQ", conn)));
                        sql = generateSQLInsert(ctiet_SoHuuVO, v_param3, "TP_KQPH_CTIET_SO_HUU", conn);
                        executeStatement(sql, v_param3, conn);
                    }
                }
                return lID;
            } else
                return new Long("0");
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }

    public Collection getListKQPHPaging(QLyKQPhatHanhVO vo, Integer page, Integer count, Integer[] totalCount) throws Exception {
        Collection reval = null;
        String whereClause = "";
        Vector vParam = new Vector();
        StringBuffer strSQL = new StringBuffer();
        try {
            strSQL.append("SELECT a.guid,a.DOT_DT,a.SO_TB_DE_NGHI_PH, a.MA_TPCP,to_char(a.NGAY_PH,'dd/MM/yyyy') NGAY_PH,to_char(a.NGAY_DT,'dd/MM/yyyy') NGAY_DT ,b.MO_TA KY_HAN,a.TONG_KLPH,a.tong_kl_trung_thau, a.TRANG_THAI, a.LOAI_TIEN ,to_char(decode(c.LS_TRUNG_THAU,'0','',c.LS_TRUNG_THAU) , 'fm9999.00') LS_TRUNG_THAU, to_char(decode(c.LS_DANH_NGHIA,'0','',c.LS_DANH_NGHIA) , 'fm9999.00') LS_DANH_NGHIA,d.NAME as TEN_TRANG_THAI FROM TP_KQPH a \n" +
                    "inner join TP_DM_KY_HAN b  on a.ky_han = b.guid \n" +
                    "inner join TP_KQPH_CTIET_TPCP c on a.guid = c.TP_KQ_PH_ID inner join TP_DM_TRANG_THAI d on a.TRANG_THAI = d.ID_STATUS");
            if (vo.getMa_tpcp() != null && !"".equals(vo.getMa_tpcp())) {
                whereClause += " and  a.MA_TPCP like '%" + vo.getMa_tpcp() + "%'";
            }
            if (vo.getDot_dt() != null && !"".equals(vo.getDot_dt())) {
                whereClause += " and  a.DOT_DT like '%" + vo.getDot_dt() + "%'";
            }
            if (vo.getTrang_thai() != null && !"".equals(vo.getTrang_thai())) {
                whereClause += " and  a.TRANG_THAI = ?";
                vParam.add(new Parameter(vo.getTrang_thai(), true));
            }
            if (vo.getNgay_phat_hanh_tu_ngay() != null && !"".equals(vo.getNgay_phat_hanh_tu_ngay())) {
                whereClause += " and trunc(a.NGAY_PH) >= ? ";

                vParam.add(new DateParameter(StringUtil.StringToDate(vo.getNgay_phat_hanh_tu_ngay(), "dd/MM/yyyy"), true));
            }
            if (vo.getNgay_phat_hanh_den_ngay() != null && !"".equals(vo.getNgay_phat_hanh_den_ngay())) {
                whereClause += " and trunc(a.NGAY_PH) <= ?";
                vParam.add(new DateParameter(StringUtil.StringToDate(vo.getNgay_phat_hanh_den_ngay(), "dd/MM/yyyy"), true));
            }
            if (whereClause != null && !whereClause.equalsIgnoreCase("")) {
                strSQL.append(" WHERE 1=1 " + whereClause);
            }
            strSQL.append(" ORDER BY a.NGAY_TAO DESC");
            reval = executeSelectWithPaging(conn, strSQL.toString(), vParam, CLASS_NAME_VO, page, count, totalCount);
        } catch (Exception ex) {
            throw new DAOException(CLASS_NAME_DAO + ".getListKQPHPaging(): " + ex.getMessage(), ex);
        }
        return reval;
    }

    public Collection getListKQPHPagingPD(QLyKQPhatHanhVO vo, Integer page, Integer count, Integer[] totalCount) throws Exception {
        Collection reval = null;
        String whereClause = " and  a.TRANG_THAI != '00'";
        Vector vParam = new Vector();
        StringBuffer strSQL = new StringBuffer();
        try {
            strSQL.append("SELECT a.guid,a.DOT_DT,a.SO_TB_DE_NGHI_PH, a.MA_TPCP,to_char(a.NGAY_PH,'dd/MM/yyyy') NGAY_PH,to_char(a.NGAY_DT,'dd/MM/yyyy') NGAY_DT ,(b.KY_HAN || ' ' || b.LOAI_KY_HAN) KY_HAN,a.TONG_KLPH, a.tong_kl_trung_thau, a.TRANG_THAI,to_char(decode(c.LS_DANH_NGHIA,'0','',c.LS_DANH_NGHIA) , 'fm9999.00') LS_DANH_NGHIA, to_char(decode(c.LS_TRUNG_THAU,'0','',c.LS_TRUNG_THAU) , 'fm9999.00') LS_TRUNG_THAU,d.NAME as TEN_TRANG_THAI, a.LOAI_TIEN FROM TP_KQPH a \n" +
                    "inner join TP_DM_KY_HAN b  on a.ky_han = b.guid \n" +
                    "inner join TP_KQPH_CTIET_TPCP c on a.guid = c.TP_KQ_PH_ID inner join TP_DM_TRANG_THAI d on a.TRANG_THAI = d.ID_STATUS");
            if (vo.getMa_tpcp() != null && !"".equals(vo.getMa_tpcp())) {
                whereClause += " and  a.MA_TPCP like '%" + vo.getMa_tpcp() + "%'";
            }
            if (vo.getDot_dt() != null && !"".equals(vo.getDot_dt())) {
                whereClause += " and  a.DOT_DT  = ?";
                vParam.add(new Parameter(vo.getDot_dt(), true));
            }
            if (vo.getTrang_thai() != null && !"".equals(vo.getTrang_thai())) {
                whereClause += " and  a.TRANG_THAI = ?";
                vParam.add(new Parameter(vo.getTrang_thai(), true));
            }
            if (vo.getNgay_phat_hanh_tu_ngay() != null && !"".equals(vo.getNgay_phat_hanh_tu_ngay())) {
                whereClause += " and trunc(a.NGAY_PH) >= ? ";
                vParam.add(new DateParameter(StringUtil.StringToDate(vo.getNgay_phat_hanh_tu_ngay(), "dd/MM/yyyy"), true));
            }
            if (vo.getNgay_phat_hanh_den_ngay() != null && !"".equals(vo.getNgay_phat_hanh_den_ngay())) {
                whereClause += " and  trunc(a.NGAY_PH)<= ?";
                vParam.add(new DateParameter(StringUtil.StringToDate(vo.getNgay_phat_hanh_den_ngay(), "dd/MM/yyyy"), true));
            }
            if (whereClause != null && !whereClause.equalsIgnoreCase("")) {
                strSQL.append(" WHERE 1=1 " + whereClause);
            }
            strSQL.append(" ORDER BY a.NGAY_TAO DESC");
            reval = executeSelectWithPaging(conn, strSQL.toString(), vParam, CLASS_NAME_VO, page, count, totalCount);
        } catch (Exception ex) {
            throw new DAOException(CLASS_NAME_DAO + ".getListKQPHPaging(): " + ex.getMessage(), ex);
        }
        return reval;
    }


    public QLyKQPhatHanhVO gettKQPHObject(Map<String, Object> map) throws Exception, TPCPException {
        StringBuffer strSQL = new StringBuffer();
        StringBuffer strSQL2 = new StringBuffer();
        Vector vParam = new Vector();
        try {
            strSQL.append("SELECT \n" +
                    "T.DOT_DT, T.GUID, T.KY_HAN,vietnamesenumbertowords.fnc_doc_tien(TONG_KLPH,'VND') TONG_KLPH_CHU, \n" +
                    "   T.LOAI_TIEN, T.LUU_KY, T.LY_DO_TU_CHOI, \n" +
                    "   T.MA_TPCP,to_char(T.NGAY_DT,'dd/MM/yyyy') NGAY_DT,to_char(T.NGAY_TB_DE_NGHI_PH,'dd/MM/yyyy') NGAY_TB_DE_NGHI_PH, \n" +
                    "   T.SO_TB_DE_NGHI_PH, T.TONG_KL_TRUNG_THAU, T.TONG_KLPH, \n" +
                    "   T.TONG_KLPH_THEM, T.TONG_TIEN_BAN,T.LY_DO_TU_CHOI, T.TRANG_THAI,to_char(T.NGAY_PH,'dd/MM/yyyy') NGAY_PH\n" +
                    "FROM TPCP_OWNER.TP_KQPH T");
            Set<String> keySet = map.keySet();
            Iterator<String> keySetIterator = keySet.iterator();
            while (keySetIterator.hasNext()) {
                String key = keySetIterator.next();
                String value = map.get(key).toString();
                if (value != null && !STRING_EMPTY.equals(value)) {
                    strSQL2.append("and " + key + " = ? ");
                    vParam.add(new Parameter(value, true));
                }
            }
            if (strSQL2.toString().length() > 0) {
                strSQL.append(" WHERE 1 = 1 " + strSQL2.toString());
            }
            return (QLyKQPhatHanhVO)findByPK(strSQL.toString(), vParam, CLASS_NAME_VO, conn);
        } catch (Exception ex) {
            throw new DAOException(CLASS_NAME_DAO + ".getKQPHObject(): " + ex.getMessage(), ex);
        }
    }

    public QLyKQPhatHanhVO getPhatHanhObjectHienThi(Map<String, Object> map) throws Exception, TPCPException {
        StringBuffer strSQL = new StringBuffer();
        StringBuffer strSQL2 = new StringBuffer();
        Vector vParam = new Vector();
        try {
            strSQL.append("SELECT a.guid,a.SO_TB_DE_NGHI_PH,a.DOT_DT,a.MA_TPCP,to_char(a.NGAY_TB_DE_NGHI_PH,'dd/MM/yyyy') NGAY_TB_DE_NGHI_PH,to_char(a.NGAY_DT,'dd/MM/yyyy') NGAY_DT ,(b.KY_HAN || ' ' || b.LOAI_KY_HAN) KY_HAN,a.TONG_KLPH, a.TRANG_THAI, a.TONG_KLPH_THEM, a.TONG_KL_TRUNG_THAU,a.LY_DO_TU_CHOI, a.TONG_TIEN_BAN, a.LOAI_TIEN, to_char(a.NGAY_PH,'dd/MM/yyyy') NGAY_PH\n" +
                    "FROM TP_KQPH a inner join TP_DM_KY_HAN b  \n" +
                    "on a.ky_han = b.guid");
            Set<String> keySet = map.keySet();
            Iterator<String> keySetIterator = keySet.iterator();
            while (keySetIterator.hasNext()) {
                String key = keySetIterator.next();
                String value = map.get(key).toString();
                if (value != null && !STRING_EMPTY.equals(value)) {
                    strSQL2.append("and a." + key + " = ? ");
                    vParam.add(new Parameter(value, true));
                }
            }
            if (strSQL2.toString().length() > 0) {
                strSQL.append(" WHERE 1 = 1 " + strSQL2.toString());
            }
            return (QLyKQPhatHanhVO)findByPK(strSQL.toString(), vParam, CLASS_NAME_VO, conn);
        } catch (Exception ex) {
            throw new DAOException(CLASS_NAME_DAO + ".getKQPhathanhObject(): " + ex.getMessage(), ex);
        }
    }

    public Long delete(QLyKQPhatHanhVO vo) throws Exception {
        Vector v_param = new Vector();
        StringBuffer strSQL = new StringBuffer();
        strSQL.append(" DELETE TP_KQPH WHERE GUID = ?");
        int nExc = 0;
        if (vo.getGuid() != null) {
            v_param.add(new Parameter(vo.getGuid(), true));
            nExc = executeStatement(strSQL.toString(), v_param, conn);
            if (nExc == 1)
                return Long.parseLong(vo.getGuid());
        }
        return new Long("0");
    }

    public Long deleteChiTiet_TPCP(QLyKQPhatHanhVO vo) throws Exception {
        Vector v_param = new Vector();
        StringBuffer strSQLChiTiet = new StringBuffer();
        strSQLChiTiet.append("DELETE TP_KQPH_CTIET_TPCP WHERE TP_KQ_PH_ID = ?");
        int nExc = 0;
        if (vo.getGuid() != null) {
            v_param.add(new Parameter(vo.getGuid(), true));
            nExc = executeStatement(strSQLChiTiet.toString(), v_param, conn);
            if (nExc == 1)
                return Long.parseLong(vo.getGuid());
        }
        return new Long("0");
    }

    public Long deleteChiTiet_SoHuu(QLyKQPhatHanhVO vo) throws Exception {
        Vector v_param = new Vector();
        StringBuffer strSQLChiTiet = new StringBuffer();
        strSQLChiTiet.append("DELETE TP_KQPH_CTIET_SO_HUU WHERE TP_KQ_PH_ID = ?");
        int nExc = 0;
        if (vo.getGuid() != null) {
            v_param.add(new Parameter(vo.getGuid(), true));
            nExc = executeStatement(strSQLChiTiet.toString(), v_param, conn);
            if (nExc == 1)
                return Long.parseLong(vo.getGuid());
        }
        return new Long("0");
    }

    // chi tiet TPCP

    public Collection getListKQPH_CTIET_TPCP(Map<String, Object> map) throws Exception, TPCPException {
        Collection reval = null;
        StringBuffer strSQL = new StringBuffer();
        StringBuffer strSQL2 = new StringBuffer();
        Vector vParam = new Vector();
        try {
            strSQL.append("SELECT \n" +
                    "T.GUID, T.KLPH, T.KLPH_THEM, \n" +
                    "    T.KY_HAN, to_char(decode(t.LS_DANH_NGHIA,'0','',t.LS_DANH_NGHIA) , 'fm9999.00') LS_DANH_NGHIA, to_char(decode(t.LS_TRUNG_THAU,'0','',t.LS_TRUNG_THAU) , 'fm9999.00') LS_TRUNG_THAU, \n" +
                    "   T.MA_TPCP, to_char(T.NGAY_DAO_HAN,'dd/MM/yyyy') NGAY_DAO_HAN,to_char(T.NGAY_PH,'dd/MM/yyyy') NGAY_PH , \n" +
                    "   T.TONG_KLPH, T.TP_KQ_PH_ID\n" +
                    "FROM TPCP_OWNER.TP_KQPH_CTIET_TPCP T");
            Set<String> keySet = map.keySet();
            Iterator<String> keySetIterator = keySet.iterator();
            while (keySetIterator.hasNext()) {
                String key = keySetIterator.next();
                String value = map.get(key).toString();
                if (value != null && !STRING_EMPTY.equals(value)) {
                    strSQL2.append("and " + key + " = ? ");
                    vParam.add(new Parameter(value, true));
                }
            }
            if (strSQL2.toString().length() > 0) {
                strSQL.append(" WHERE 1 = 1 " + strSQL2.toString());
            }
            reval = executeSelectStatement(strSQL.toString(), vParam, CLASS_NAME_VO_CTIET_TPCP, this.conn);
            return reval;
        } catch (Exception ex) {
            throw new DAOException(CLASS_NAME_DAO + ".getListKQPHChiTiet_TPCPPaging(): " + ex.getMessage(), ex);
        }
    }

    public Collection getListKQPH_CTIET_TPCP_HIENTHI(Map<String, Object> map) throws Exception, TPCPException {
        Collection reval = null;
        StringBuffer strSQL = new StringBuffer();
        StringBuffer strSQL2 = new StringBuffer();
        Vector vParam = new Vector();
        try {
            strSQL.append("SELECT \n" +
                    "T.GUID, T.KLPH, T.KLPH_THEM, \n" +
                    "    (b.KY_HAN || ' ' || b.LOAI_KY_HAN) KY_HAN, to_char(decode(t.LS_DANH_NGHIA,'0','',t.LS_DANH_NGHIA) , 'fm9999.00') LS_DANH_NGHIA, to_char(decode(t.LS_TRUNG_THAU,'0','',t.LS_TRUNG_THAU) , 'fm9999.00') LS_TRUNG_THAU, \n" +
                    "   T.MA_TPCP, to_char(T.NGAY_DAO_HAN,'dd/MM/yyyy') NGAY_DAO_HAN,to_char(T.NGAY_PH,'dd/MM/yyyy') NGAY_PH , \n" +
                    "   T.TONG_KLPH, T.TP_KQ_PH_ID\n" +
                    "FROM TPCP_OWNER.TP_KQPH_CTIET_TPCP T inner join TP_DM_KY_HAN b on T.KY_HAN = b.GUID");
            Set<String> keySet = map.keySet();
            Iterator<String> keySetIterator = keySet.iterator();
            while (keySetIterator.hasNext()) {
                String key = keySetIterator.next();
                String value = map.get(key).toString();
                if (value != null && !STRING_EMPTY.equals(value)) {
                    strSQL2.append("and " + key + " = ? ");
                    vParam.add(new Parameter(value, true));
                }
            }
            if (strSQL2.toString().length() > 0) {
                strSQL.append(" WHERE 1 = 1 " + strSQL2.toString());
            }
            reval = executeSelectStatement(strSQL.toString(), vParam, CLASS_NAME_VO_CTIET_TPCP, this.conn);
            return reval;
        } catch (Exception ex) {
            throw new DAOException(CLASS_NAME_DAO + ".getListKQPHChiTiet_TPCPPaging(): " + ex.getMessage(), ex);
        }
    }

    public Collection getListKQPH_CTIET_TPCP_EDIT(Map<String, Object> map) throws Exception, TPCPException {
        Collection reval = null;
        StringBuffer strSQL = new StringBuffer();
        StringBuffer strSQL2 = new StringBuffer();
        Vector vParam = new Vector();
        try {
            strSQL.append("SELECT \n" +
                    "T.GUID, T.KLPH, T.KLPH_THEM, KY_HAN, to_char(decode(t.LS_DANH_NGHIA,'0','',t.LS_DANH_NGHIA) , 'fm9999.00') LS_DANH_NGHIA, to_char(decode(t.LS_TRUNG_THAU,'0','',t.LS_TRUNG_THAU) , 'fm9999.00') LS_TRUNG_THAU, \n" +
                    "   T.MA_TPCP, to_char(T.NGAY_DAO_HAN,'dd/MM/yyyy') NGAY_DAO_HAN,to_char(T.NGAY_PH,'dd/MM/yyyy') NGAY_PH , \n" +
                    "   T.TONG_KLPH, T.TP_KQ_PH_ID\n" +
                    "FROM TPCP_OWNER.TP_KQPH_CTIET_TPCP T inner join TP_DM_KY_HAN  b on T.KY_HAN = b.GUID ");
            Set<String> keySet = map.keySet();
            Iterator<String> keySetIterator = keySet.iterator();
            while (keySetIterator.hasNext()) {
                String key = keySetIterator.next();
                String value = map.get(key).toString();
                if (value != null && !STRING_EMPTY.equals(value)) {
                    strSQL2.append("and " + key + " = ? ");
                    vParam.add(new Parameter(value, true));
                }
            }
            if (strSQL2.toString().length() > 0) {
                strSQL.append(" WHERE 1 = 1 " + strSQL2.toString());
            }
            reval = executeSelectStatement(strSQL.toString(), vParam, CLASS_NAME_VO_CTIET_TPCP, this.conn);
            return reval;
        } catch (Exception ex) {
            throw new DAOException(CLASS_NAME_DAO + ".getListKQPHChiTiet_TPCPPaging(): " + ex.getMessage(), ex);
        }
    }

    public QLyKQPhatHanhCTiet_TpcpVO getKQPH_CTIET_TPCPObject(Map<String, Object> map) throws Exception, TPCPException {
        StringBuffer strSQL = new StringBuffer();
        StringBuffer strSQL2 = new StringBuffer();
        Vector vParam = new Vector();
        try {
            strSQL.append("SELECT * FROM TP_KQPH_CTIET_TPCP");
            Set<String> keySet = map.keySet();
            Iterator<String> keySetIterator = keySet.iterator();
            while (keySetIterator.hasNext()) {
                String key = keySetIterator.next();
                String value = map.get(key).toString();
                if (value != null && !STRING_EMPTY.equals(value)) {
                    strSQL2.append("and " + key + " = ? ");
                    vParam.add(new Parameter(value, true));
                }
            }
            if (strSQL2.toString().length() > 0) {
                strSQL.append(" WHERE 1 = 1 " + strSQL2.toString());
            }
            return (QLyKQPhatHanhCTiet_TpcpVO)findByPK(strSQL.toString(), vParam, CLASS_NAME_VO_CTIET_TPCP, conn);
        } catch (Exception ex) {
            throw new DAOException(CLASS_NAME_DAO + ".getListKQPHChiTiet_TPCPObject(): " + ex.getMessage(), ex);
        }
    }

    //end chi tiet TPCP

    public Collection getListKQPH_CTIET_SoHuu(Map<String, Object> map) throws Exception, TPCPException {
        Collection reval = null;
        StringBuffer strSQL = new StringBuffer();
        StringBuffer strSQL2 = new StringBuffer();
        Vector vParam = new Vector();
        try {
            strSQL.append("SELECT \n" +
                    "T.GUID,T.KL_TRUNG_THAU, to_char(decode(t.LS_TRUNG_THAU,'0','',t.LS_TRUNG_THAU) , 'fm9999.00') LS_TRUNG_THAU, \n" +
                    "   T.MA_NGUOI_SO_HUU, T.MA_TPCP, T.SO_TK_TT, \n" +
                    "   T.STT, T.TEN_NGUOI_SO_HUU, T.TIEN_TT_MUA, \n" +
                    "   T.TP_KQ_PH_ID, T.TRANG_THAI_TT, T.THANH_VIEN_DAU_THAU\n" +
                    "FROM TP_KQPH_CTIET_SO_HUU T");
            Set<String> keySet = map.keySet();
            Iterator<String> keySetIterator = keySet.iterator();
            while (keySetIterator.hasNext()) {
                String key = keySetIterator.next();
                String value = map.get(key).toString();
                if (value != null && !STRING_EMPTY.equals(value)) {
                    strSQL2.append("and " + key + " = ? ");
                    vParam.add(new Parameter(value, true));
                }
            }
            if (strSQL2.toString().length() > 0) {
                strSQL.append(" WHERE 1 = 1 " + strSQL2.toString());
            }
            reval = executeSelectStatement(strSQL.toString(), vParam, CLASS_NAME_VO_CTIET_SoHuu, this.conn);
            return reval;
        } catch (Exception ex) {
            throw new DAOException(CLASS_NAME_DAO + ".getListKQPHChiTiet_SoHuuPaging(): " + ex.getMessage(), ex);
        }
    }


    public QLyKQPhatHanhCTiet_SoHuuVO getKQPH_SoHuu_TPCPObject(Map<String, Object> map) throws Exception, TPCPException {
        StringBuffer strSQL = new StringBuffer();
        StringBuffer strSQL2 = new StringBuffer();
        Vector vParam = new Vector();
        try {
            strSQL.append("SELECT * FROM TP_KQPH_CTIET_SO_HUU");
            Set<String> keySet = map.keySet();
            Iterator<String> keySetIterator = keySet.iterator();
            while (keySetIterator.hasNext()) {
                String key = keySetIterator.next();
                String value = map.get(key).toString();
                if (value != null && !STRING_EMPTY.equals(value)) {
                    strSQL2.append("and " + key + " = ? ");
                    vParam.add(new Parameter(value, true));
                }
            }
            if (strSQL2.toString().length() > 0) {
                strSQL.append(" WHERE 1 = 1 " + strSQL2.toString());
            }
            return (QLyKQPhatHanhCTiet_SoHuuVO)findByPK(strSQL.toString(), vParam, CLASS_NAME_VO_CTIET_SoHuu, conn);
        } catch (Exception ex) {
            throw new DAOException(CLASS_NAME_DAO + ".getListKQPHChiTiet_SoHuuObject(): " + ex.getMessage(), ex);
        }
    }

    public QLyKQPhatHanhCTiet_TpcpVO getKQPH_CTIET_TPCP(String dot_dt) throws Exception, TPCPException {
        Collection reval = null;
        StringBuffer strSQL = new StringBuffer();
        StringBuffer strSQL2 = new StringBuffer();
        Vector vParam = new Vector();
        try {
            strSQL.append("SELECT \n" +
                    "T.GUID,T.LS_DANH_NGHIA  " + "FROM TPCP_OWNER.TP_KQPH_CTIET_TPCP T inner join TP_KQPH b on T.TP_KQ_PH_ID=b.GUID ");

            if (dot_dt != null && !STRING_EMPTY.equals(dot_dt)) {
                strSQL.append("where b.dot_dt = ? ");
                vParam.add(new Parameter(dot_dt, true));
            }

            QLyKQPhatHanhCTiet_TpcpVO vo = (QLyKQPhatHanhCTiet_TpcpVO)findByPK(strSQL.toString(), vParam, CLASS_NAME_VO_CTIET_TPCP, this.conn);
            return vo;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new DAOException(CLASS_NAME_DAO + ".getKQPH_CTIET_TPCP(): " + ex.getMessage(), ex);
        }
    }
    //Bang TP_KQPH_FILE

    public void insertTP_KQPH_FILE(byte[] kqphPDFFile, long id_kq_ph, String ngay_imp, long nguoi_imp) throws Exception {

        PreparedStatement pstm = null;
        StringBuffer sql = new StringBuffer();
        Blob fileBLOB;
        sql.append("INSERT INTO TP_KQPH_FILE(KQPH_ID,NGAY_IMP,NGUOI_IMP,FILE_IMP) values(");
        sql.append(id_kq_ph);
        sql.append(", to_date('" + ngay_imp + "', 'DDMMRRRRHH24MISS')");
        sql.append(", ");
        sql.append(nguoi_imp);
        sql.append(",?)");
        pstm = conn.prepareStatement(sql.toString());
        fileBLOB = conn.createBlob();
        fileBLOB.setBytes(1, kqphPDFFile);
        pstm.setBlob(1, fileBLOB);
        pstm.execute();
        pstm.close();
        fileBLOB = null;
    }

    public Long deleteTP_KQPH_FILE(QLyKQPhatHanhVO vo) throws Exception {
        Vector v_param = new Vector();
        StringBuffer strSQLChiTiet = new StringBuffer();
        strSQLChiTiet.append("DELETE TP_KQPH_FILE WHERE KQPH_ID = ?");
        int nExc = 0;
        if (vo.getGuid() != null) {
            v_param.add(new Parameter(vo.getGuid(), true));
            nExc = executeStatement(strSQLChiTiet.toString(), v_param, conn);
            if (nExc == 1)
                return Long.parseLong(vo.getGuid());
        }
        return new Long("0");
    }
    //END TP_KQPH_FILE

}
